{"name":"Cronfed","tagline":"Convert cron emails to RSS 2.0. It's the least you can do!","body":"![Cronfed logo](https://farm9.staticflickr.com/8144/7544169948_8abb2bb2f3_m_d.jpg)\r\n\r\nCronfed is a tool for monitoring basic batch jobs, or any other\r\ncron-based scheduled commands. It achieves this by parsing a given\r\nmailbox and turning it into an RSS feed, which can then be monitored\r\nwith your [browser][], [feedreader][] or other RSS-compatible service\r\n(such as [IFTTT][]).\r\n\r\nSimply add a cron job to generate the feed, pointing it at a\r\nweb-accessible location (such as a `public_html` directory or your\r\nsite’s assets directory). Check out the example for some real-world\r\nCronfed usage, with an explanation of how cron and Cronfed work\r\ntogether.\r\n\r\nCronfed is aimed at providing a basic threshold of monitoring without\r\ncomplex automation or dependencies, making it suitable for smaller\r\nprojects which otherwise might go without any monitoring at all. It’s so\r\neasy to set up and use on the standard Linux/BSD machine that there’s no\r\nreason to not use it from Day 1. While Cronfed makes attempts at\r\nlimiting the amount of information externalized, it is not recommended\r\nfor jobs with extremely-sensitive information.\r\n\r\n*“Cronfed: It’s the least you could do!”*\r\n\r\nExample\r\n-------\r\n\r\nFirst, let’s look at a basic cron job. This one will fetch our data once\r\nan hour, on the hour:\r\n\r\n    0 * * * * /usr/bin/python /home/myuser/project/fetch.py 2>&1 | tee -a /home/myuser/project/logs/fetch.txt\r\n\r\nNotice how the output (`stdout` + `stderr`) is piped to a log file, but\r\nusing the `tee` command. This ensures that the output goes to the file\r\nas well as `stdout`. `cron` captures that `stdout` and puts it into an\r\nemail, which then gets sent to the user who owns the job. This usually\r\nmeans the email goes to `myuser@localhost`, which on many distributions\r\nmeans that it is saved to `/var/mail/myuser`. Do note that if the\r\ncommand generates no output, then `cron` **will not send an email**, so\r\nit’s a good idea to emit an error message.\r\n\r\nOnce we’re sure that email is being delivered, we’re halfway there. Now\r\nwe just need the actual Cronfed cronjob:\r\n\r\n    */15 * * * * /usr/bin/python -m cronfed --output /var/www/mysite/assets/cronfed.rss /var/mail/myuser 2>&1 | tee -a /home/myuser/project/logs/cronfed.txt\r\n\r\nIn this example we have the installed `cronfed` module regenerating our\r\nfeed every fifteen minutes. This is a pretty quick process in most\r\ncases, so feel free to make it more often. In this case, the output of\r\ncronfed itself is monitored in exactly the same way as normal cron jobs,\r\nwith a logfile and email to `user@localhost`.\r\n\r\nHistory\r\n-------\r\n\r\nCronfed was created for [Hatnote][] to monitor the periodic data\r\nrefreshes necessary to generate [The Weeklypedia][].\r\n\r\n-   Copyright: (c) 2015 by Mark Williams and Mahmoud Hashemi\r\n-   License: BSD, see LICENSE for more details.\r\n-   Logo is [Cow-laboration #23](https://www.flickr.com/photos/opensourceway/7544169948/in/set-72157630515775420)\r\n\r\n  [browser]: https://www.mozilla.org/en-US/firefox/new/\r\n  [feedreader]: https://theoldreader.com/\r\n  [IFTTT]: https://ifttt.com/\r\n  [Hatnote]: http://hatnote.com\r\n  [The Weeklypedia]: http://weekly.hatnote.com","google":"UA-61001711-1","note":"Don't delete this file! It's used internally to help with page regeneration."}